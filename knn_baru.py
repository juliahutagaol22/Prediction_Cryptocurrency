# -*- coding: utf-8 -*-
"""KNN_Baru.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FmGMPpbMhDQrSV0nSX5yt2xLv6sSsODm

# **Analisis Perbandingan Algoritma KNN dan Long Short Term Memory(LSTM) dalam Memprediksi Pergerakan Harga Cryptocurrency**

Menyiapkan library
"""

pip install yfinance

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from math import sqrt
import yfinance as yf
import pandas_datareader.data as pdr
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, recall_score, precision_score, accuracy_score
yf.pdr_override()

"""Import dataset dan preprocessing"""

koin = input('Koin : ')
if (koin == 'DOGE'):
  df = pdr.get_data_yahoo("DOGE-USD", start="2019-05-10", end="2022-05-10")
else:
  df = pdr.get_data_yahoo("BNB-USD", start="2019-05-10", end="2022-05-10")

df

Perubahan = []
for i in range(len(df['Adj Close'])-1):
  rubah = (df['Adj Close'][i+1]-df['Adj Close'][i])/df['Adj Close'][i]
  Perubahan.append(round(rubah*100,1))
df = df[1:].reset_index()
df['Perubahan'] = Perubahan

df

"""Menambahkan indikator"""

ini_ma_20 = []
for i in range(len(df['Adj Close'])-19):
  ma = df.loc[i:i+19, 'Adj Close'].mean()
  ini_ma_20.append(ma)

ini_ma_50 = []
for i in range(len(df['Adj Close'])-49):
  ma = df.loc[i:i+49, 'Adj Close'].mean()
  ini_ma_50.append(ma)

ini_k = []
ini_d = []
for i in range(len(df['Adj Close'])-13):
  harga = df.loc[i:i+13, 'Adj Close']
  tinggi = harga.max()
  rendah = harga.min()
  k = ((df.loc[i+13, 'Adj Close']-rendah)/(tinggi-rendah))*100
  ini_k.append(k)
  if(i >= 3):
    d = np.mean(ini_k[i-3:i])
    ini_d.append(d)

ini_rsi = []
for i in range(1,len(df['Adj Close'])-14):
  pos = []
  neg = []
  for j in range(i,i+14):
    gain = df.loc[j, 'Adj Close'] - df.loc[j-1,'Adj Close']
    if gain < 0:
      neg.append(gain)
    else:
      pos.append(gain)
  rs = sum(pos) / sum(neg) * -1
  rsi = 100 - (100/(1+rs))
  ini_rsi.append(rsi)

df_hasil = df[49:].reset_index(drop=True)
df_hasil.insert(loc=7, column='MA20', value=ini_ma_20[30:])
df_hasil.insert(loc=8, column='MA50', value=ini_ma_50)
df_hasil.insert(loc=9, column='RSI', value=ini_rsi[34:])
df_hasil.insert(loc=10, column='%K', value=ini_k[36:])
df_hasil.insert(loc=11, column='%D', value=ini_d[33:])
df_hasil.head()

df_hasil['M20Price'] = (df_hasil['Adj Close'] - df_hasil['MA20'])/df_hasil['Adj Close']
df_hasil['M50Price'] = (df_hasil['Adj Close'] - df_hasil['MA50'])/df_hasil['Adj Close']
df_hasil['H-Price'] = (df_hasil['Adj Close'] - df_hasil['High'])/df_hasil['Adj Close']
df_hasil['L-Price'] = (df_hasil['Adj Close'] - df_hasil['Low'])/df_hasil['Adj Close']
df_hasil.head()

df_hasil[['Naik']] = np.where(df_hasil[['Perubahan']] > 0, 1, -1)

df_hasil

"""Menyimpan menjadi file"""

if koin == 'DOGE':
  df_hasil.to_csv('Hasil_DOGE.csv', index=False)
else:
  df_hasil.to_csv('Hasil_BNB.csv', index=False)

if koin == 'DOGE':
  hasil = pd.read_csv('Hasil_DOGE.csv')
else:
  hasil = pd.read_csv('Hasil_BNB.csv')

hasil.head()

"""Menyiapkan data latih dan data uji"""

hasil = hasil.drop(['Open', 'High', 'Adj Close','Low', 'Date', 'Close', 'Volume', 'MA20', 'MA50'], axis=1)

hasil.head()

hasil[['Naik']] = hasil.loc[1:,['Naik']].reset_index(drop=True)
hasil = hasil[:-1]

hasil

label = hasil.Naik.values
buat_coba = hasil.drop('Naik', axis=1)

X_train, X_test, y_train, y_test = train_test_split(buat_coba,
                                                    label,
                                                    test_size=0.25,
                                                    random_state=1,
                                                    stratify=label
                                                    )

"""Pembuatan model dengan mencoba beberapa nilai K, yaitu 3, 5, dan 7"""

imax, max = 0, 0
for i in range(3,8,2):
  knn = KNeighborsClassifier(n_neighbors = i)
  knn.fit(X_train,y_train)
  abc = knn.predict(X_test)
  if accuracy_score(y_test,abc) > max:
    max = accuracy_score(y_test,abc)
    imax = i
  print("Nilai K :", i)
  print(f"Akurasi : {accuracy_score(y_test,abc)}")
  print(f"RMSE    : {sqrt(mean_squared_error(y_test,abc))}")

prediksi = df_hasil.loc[df_hasil['Date'] == '2022-05-09']
prediksi = prediksi.drop(['Open', 'High', 'Adj Close','Low', 'Close', 'Date', 'Volume', 'MA20', 'MA50', 'Naik'], axis=1)

knn = KNeighborsClassifier(n_neighbors = imax)
knn.fit(X_train,y_train)
print(f"Hasil prediksi : {int(knn.predict(prediksi))}")
print(f"Sesungguhnya   : {int(df_hasil.loc[df_hasil['Date'] == '2022-05-09']['Naik'])}")